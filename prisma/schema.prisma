generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Karyawan {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customId         String   @unique
  name             String
  nip              String?  @unique
  nik              String?  @unique
  npwp             String?  @unique

  emailPribadi     String?
  phone            String?
  address          String?
  birthDate        String?
  tempatLahir      String?
  jenisKelamin     String?
  agama            String?

  joinDate         String
  position         String
  department       String
  pendidikan       String?
  golongan         String?

  image            String?
  kontakDarurat    String?
  hubunganDarurat  String?
  status           UserStatus
  lastLogin        DateTime?
  user             User?   

  @@map("karyawan")
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customId     String   @unique
  username     String   @unique
  email        String   @unique
  role         Role
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  attendances  Attendance[]
  barcodes     Barcode[]
  izinLokasi   AbsensiIzinLokasi[]
  kantorId    String?    @db.Uuid
  kantor      Kantor?    @relation("KantorUsers", fields: [kantorId], references: [id])
  karyawan     Karyawan? @relation(fields: [customId], references: [customId])

  @@map("users")
}

model Attendance {
  id_at        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User     @relation(fields: [userId], references: [customId])
  userId       String

  date         String
  clockIn      String
  clockOut     String?
  status       AttendanceStatus
  photoIn      String?
  photoOut     String?
  latitude     Float?
  longitude    Float?
  location     String?
  barcodeIn    String?
  barcodeOut   String?
  barcodeInAt  DateTime?
  barcodeOutAt DateTime?
  createdAt    DateTime @default(now())
}

model Barcode {
  id        String   @id @default(uuid()) @db.Uuid
  code      String   @unique
  userId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [customId])
}

model AlatKalibrasi {
  id                 String   @id @default(uuid()) @db.Uuid
  nama_alat          String
  merek_model        String
  nomor_seri         String   @unique
  rentang_pengukuran String
  kelas_akurasi      String
  tanggal_kalibrasi  String
  tanggal_kadaluarsa String
  id_lokasi          String
  status             String
  foto               String?
  createdAt          DateTime @default(now())
}

model SparePart {
  id        String   @id @default(uuid()) @db.Uuid
  nama      String
  kode      String   @unique
  jumlah    Int
  lokasi    String
  supplier  String?
  foto      String?
  status    String
  createdAt DateTime @default(now())
}

model LokasiDinas {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  latitude    Float
  longitude   Float
  radius     Int      @default(100)

  izinList   AbsensiIzinLokasi[]
}

model AbsensiIzinLokasi {
  id          String       @id @default(uuid()) @db.Uuid
  user        User         @relation(fields: [userId], references: [customId])
  userId      String

  lokasi      LokasiDinas  @relation(fields: [lokasiId], references: [id])
  lokasiId    String       @db.Uuid

  kantor      Kantor?      @relation(fields: [kantorId], references: [id])
  kantorId    String?      @db.Uuid

  tanggal     DateTime
  keperluan   String?
  createdAt   DateTime     @default(now())
}

model Kantor {
  id          String   @id @default(uuid())  @db.Uuid
  nama        String
  alamat      String?
  latitude    Float
  longitude   Float
  radiusMeter Float     
  users       User[]    @relation("KantorUsers")
  izinLokasi  AbsensiIzinLokasi[]  

  createdAt   DateTime @default(now())
}

enum Role {
  ADMIN
  OWNER
  DIREKTUR
  MANAJER
  KARYAWAN
  TEKNISI
  KEUANGAN
  KEPALA_GUDANG
}

enum UserStatus {
  AKTIF
  NONAKTIF
  DITANGGUHKAN
}

enum AttendanceStatus {
  TEPAT_WAKTU
  TERLAMBAT
  PULANG_CEPAT
}
